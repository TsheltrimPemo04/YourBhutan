{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useUser } from \"@clerk/nextjs\";\nimport { createClient } from \"@supabase/supabase-js\";\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\nasync function syncHostWithSupabase() {\n  _s();\n  const {\n    user\n  } = useUser();\n  if (!user) return;\n  const {\n    id,\n    firstName,\n    lastName,\n    emailAddresses\n  } = user;\n\n  // Check if the host already exists in Supabase\n  const {\n    data,\n    error\n  } = await supabase.from(\"HOST\").select(\"*\").eq(\"ClerkUserId\", id).single();\n  if (!data) {\n    // If the host is not found, insert it\n    const {\n      data: newHost,\n      error: insertError\n    } = await supabase.from(\"HOST\").insert([{\n      ClerkUserId: id,\n      HostName: `${firstName} ${lastName}`,\n      HostEmail: emailAddresses[0].emailAddress,\n      HostContact: null // Can be updated later\n    }]).select();\n    if (insertError) console.error(\"Error inserting host:\", insertError);\n    return newHost;\n  }\n  return data;\n}\n_s(syncHostWithSupabase, \"Q+JCVIy3JH0MXpFK+vm68eAxsAY=\", false, function () {\n  return [useUser];\n});","map":{"version":3,"names":["useUser","createClient","supabase","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","syncHostWithSupabase","_s","user","id","firstName","lastName","emailAddresses","data","error","from","select","eq","single","newHost","insertError","insert","ClerkUserId","HostName","HostEmail","emailAddress","HostContact","console"],"sources":["/Users/tsheltrimpemo/Desktop/YourBhutan/src/utils/supabaseClient.js"],"sourcesContent":["import { useUser } from \"@clerk/nextjs\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n);\n\nasync function syncHostWithSupabase() {\n  const { user } = useUser();\n  if (!user) return;\n\n  const { id, firstName, lastName, emailAddresses } = user;\n  \n  // Check if the host already exists in Supabase\n  const { data, error } = await supabase\n    .from(\"HOST\")\n    .select(\"*\")\n    .eq(\"ClerkUserId\", id)\n    .single();\n\n  if (!data) {\n    // If the host is not found, insert it\n    const { data: newHost, error: insertError } = await supabase.from(\"HOST\").insert([\n      {\n        ClerkUserId: id, \n        HostName: `${firstName} ${lastName}`,\n        HostEmail: emailAddresses[0].emailAddress,\n        HostContact: null, // Can be updated later\n      }\n    ]).select();\n\n    if (insertError) console.error(\"Error inserting host:\", insertError);\n    return newHost;\n  }\n\n  return data;\n}\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,QAAQ,GAAGD,YAAY,CAC3BE,OAAO,CAACC,GAAG,CAACC,wBAAwB,EACpCF,OAAO,CAACC,GAAG,CAACE,6BACd,CAAC;AAED,eAAeC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM;IAAEC;EAAK,CAAC,GAAGT,OAAO,CAAC,CAAC;EAC1B,IAAI,CAACS,IAAI,EAAE;EAEX,MAAM;IAAEC,EAAE;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAe,CAAC,GAAGJ,IAAI;;EAExD;EACA,MAAM;IAAEK,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMb,QAAQ,CACnCc,IAAI,CAAC,MAAM,CAAC,CACZC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,aAAa,EAAER,EAAE,CAAC,CACrBS,MAAM,CAAC,CAAC;EAEX,IAAI,CAACL,IAAI,EAAE;IACT;IACA,MAAM;MAAEA,IAAI,EAAEM,OAAO;MAAEL,KAAK,EAAEM;IAAY,CAAC,GAAG,MAAMnB,QAAQ,CAACc,IAAI,CAAC,MAAM,CAAC,CAACM,MAAM,CAAC,CAC/E;MACEC,WAAW,EAAEb,EAAE;MACfc,QAAQ,EAAG,GAAEb,SAAU,IAAGC,QAAS,EAAC;MACpCa,SAAS,EAAEZ,cAAc,CAAC,CAAC,CAAC,CAACa,YAAY;MACzCC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC,CACF,CAAC,CAACV,MAAM,CAAC,CAAC;IAEX,IAAII,WAAW,EAAEO,OAAO,CAACb,KAAK,CAAC,uBAAuB,EAAEM,WAAW,CAAC;IACpE,OAAOD,OAAO;EAChB;EAEA,OAAON,IAAI;AACb;AAACN,EAAA,CA7BcD,oBAAoB;EAAA,QAChBP,OAAO;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}