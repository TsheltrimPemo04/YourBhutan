{"ast":null,"code":"var _jsxFileName = \"/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/host/Homestay.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: \"\",\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]); // ✅ Depend only on `user` to prevent infinite loops\n\n//   /** Fetch the homestay for the logged-in host */\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       // Fetch the correct host ID from Supabase\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\") // Ensure this is the correct table\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id) // Match Clerk user ID with Supabase field\n//         .single();\n\n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const hostId = hostData.hostid; // ✅ This is the correct UUID\n\n//       // Now fetch the homestay with the correct hostId\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId) // Use the correct UUID\n//         .single();\n\n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n\n//   /** Handle form input changes */\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   /** Handle availability date selection */\n//   function handleDateChange(date) {\n//     if (!date) return; // Avoid null errors\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date] // Append date to array\n//     }));\n//   }\n\n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n\n//   /** Handle homestay submission */\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n\n//     // Fetch the correct host ID from Supabase\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n\n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n\n//     const hostId = hostData.hostid; // ✅ Use UUID from Supabase, not Clerk user ID\n\n//     // Insert homestay using correct hostid\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId, // ✅ Ensure this is a UUID\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]), // Convert to YYYY-MM-DD\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images.split(\",\"), \n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n\n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(); // ✅ Force UI update after insertion\n//     }\n//   }\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         {homestay ? (\n//           <div className=\"mt-6\">\n//             <h3 className=\"text-gray-600\"><strong>Name:</strong>{homestay.name}</h3>\n//             <p className=\"text-gray-600 mt-2\"><strong>About:</strong>{homestay.description}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Facilities:</strong> {homestay.facilities}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Availability Dates:</strong> {homestay.availabilitydate.join(\", \")}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Location:</strong> {homestay.location}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Google Map:</strong> <a href={homestay.googlemapurl} target=\"_blank\" rel=\"noopener noreferrer\">View on Google Maps</a></p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Price per Night:</strong> Nu. {homestay.pricepernight}</p>\n//             <div className=\"mt-4\">\n//               <h4 className=\"text-lg font-semibold\">Images</h4>\n//               <div className=\"flex gap-2 mt-2\">\n//                 {homestay.images.map((img, index) => (\n//                   <img key={index} src={img} alt=\"Homestay\" className=\"w-32 h-32 object-cover rounded-lg\" />\n//                 ))}\n//               </div>\n//             </div>\n//             <button className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">Edit</button>\n//           </div>\n//         ) : (\n//           <div className=\"mt-6\">\n//             <p className=\"text-gray-600\">You have not listed any homestay yet. Add your homestay below:</p>\n//             <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//               <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//               <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//               <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n\n//             {/* Multi-Date Availability Selection */}\n//             <div>\n//               <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//               <DatePicker\n//                 selected={null}\n//                 onChange={(date) => {\n//                   if (date) {\n//                     setFormData(prevState => ({\n//                       ...prevState,\n//                       availabilitydate: [...prevState.availabilitydate, date]\n//                     }));\n//                   }\n//                 }}\n//                 dateFormat=\"yyyy-MM-dd\"\n//                 className=\"w-full border p-2 rounded\"\n//                 placeholderText=\"Select available dates\"\n//               />\n\n//               {/* Display Selected Dates */}\n//               <div className=\"mt-2 flex flex-wrap gap-2\">\n//                 {formData.availabilitydate.map((date, index) => (\n//                   <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                     <span>{date.toISOString().split(\"T\")[0]}</span>\n//                     <button\n//                       type=\"button\"\n//                       className=\"ml-2 text-red-500\"\n//                       onClick={() => removeDate(index)}\n//                     >\n//                       ❌\n//                     </button>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n\n//               {/* Location Dropdown */}\n//               <select\n//                 name=\"location\"\n//                 value={formData.location}\n//                 onChange={handleChange}\n//                 className=\"w-full border p-2 rounded\"\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Dzongkhag</option>\n//                 {dzongkhags.map((dzongkhag, index) => (\n//                   <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//                 ))}\n//               </select>\n\n//               <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//               <input type=\"text\" name=\"images\" placeholder=\"Image URLs (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.images} onChange={handleChange} required />\n//               <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n\n//               <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//             </form>\n//           </div>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useUser } from \"@clerk/clerk-react\";\nimport { supabase } from \"../../utils/supabaseClient\";\nimport Sidebar from \"../../components/Sidebar\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dzongkhags = [\"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\", \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"];\nfunction Homestay() {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [homestay, setHomestay] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    facilities: \"\",\n    availabilitydate: [],\n    location: \"\",\n    googlemapurl: \"\",\n    images: [],\n    pricepernight: \"\"\n  });\n  const [imageFiles, setImageFiles] = useState([]);\n  useEffect(() => {\n    if (user) {\n      fetchHomestay();\n    }\n  }, [user]);\n  async function fetchHomestay() {\n    setLoading(true);\n    try {\n      const {\n        data: hostData,\n        error: hostError\n      } = await supabase.from(\"host\").select(\"hostid\").eq(\"clerkuserid\", user.id).single();\n      if (hostError || !hostData) {\n        console.error(\"Error fetching host ID:\", hostError);\n        setLoading(false);\n        return;\n      }\n      const hostId = hostData.hostid;\n      const {\n        data,\n        error\n      } = await supabase.from(\"homestay\").select(\"*\").eq(\"hostid\", hostId).single();\n      if (error) {\n        console.error(\"Error fetching homestay:\", error);\n      } else {\n        setHomestay(data);\n      }\n    } catch (err) {\n      console.error(\"Unexpected error:\", err);\n    }\n    setLoading(false);\n  }\n  function handleChange(e) {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  }\n  async function uploadImages() {\n    const uploadedUrls = [];\n    for (const file of imageFiles) {\n      const {\n        data,\n        error\n      } = await supabase.storage.from(\"homestay-images\").upload(`${user.id}/${file.name}`, file);\n      if (error) {\n        console.error(\"Image upload error:\", error);\n      } else {\n        const url = `${supabase.storage.from(\"homestay-images\").getPublicUrl(user.id + '/' + file.name).publicURL}`;\n        uploadedUrls.push(url);\n      }\n    }\n    return uploadedUrls;\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (!user) return;\n    const {\n      data: hostData,\n      error: hostError\n    } = await supabase.from(\"host\").select(\"hostid\").eq(\"clerkuserid\", user.id).single();\n    if (hostError || !hostData) {\n      console.error(\"Error fetching host ID:\", hostError);\n      return;\n    }\n    const hostId = hostData.hostid;\n    const uploadedImageUrls = await uploadImages();\n    const {\n      error\n    } = await supabase.from(\"homestay\").insert([{\n      hostid: hostId,\n      name: formData.name,\n      description: formData.description,\n      facilities: formData.facilities,\n      availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n      location: formData.location,\n      googlemapurl: formData.googlemapurl,\n      images: uploadedImageUrls,\n      pricepernight: formData.pricepernight\n    }]);\n    if (error) {\n      console.error(\"Error adding homestay:\", error);\n    } else {\n      console.log(\"Homestay added successfully!\");\n      fetchHomestay();\n    }\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold\",\n        children: \"Homestay Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), !homestay && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"mt-4 space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Homestay Name\",\n          className: \"w-full border p-2 rounded\",\n          value: formData.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          placeholder: \"Description\",\n          className: \"w-full border p-2 rounded\",\n          value: formData.description,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"facilities\",\n          placeholder: \"Facilities\",\n          className: \"w-full border p-2 rounded\",\n          value: formData.facilities,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"pricepernight\",\n          placeholder: \"Price per Night (Nu.)\",\n          className: \"w-full border p-2 rounded\",\n          value: formData.pricepernight,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: true,\n          accept: \"image/*\",\n          onChange: e => setImageFiles([...e.target.files]),\n          className: \"w-full border p-2 rounded\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-green-500 text-white px-4 py-2 rounded\",\n          children: \"Add Homestay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n}\n_s(Homestay, \"wdYO0xwCZnkxlPrh3Pie8/jzDPU=\", false, function () {\n  return [useUser];\n});\n_c = Homestay;\nexport default Homestay;\nvar _c;\n$RefreshReg$(_c, \"Homestay\");","map":{"version":3,"names":["React","useEffect","useState","useUser","supabase","Sidebar","DatePicker","jsxDEV","_jsxDEV","dzongkhags","Homestay","_s","user","homestay","setHomestay","loading","setLoading","formData","setFormData","name","description","facilities","availabilitydate","location","googlemapurl","images","pricepernight","imageFiles","setImageFiles","fetchHomestay","data","hostData","error","hostError","from","select","eq","id","single","console","hostId","hostid","err","handleChange","e","target","value","uploadImages","uploadedUrls","file","storage","upload","url","getPublicUrl","publicURL","push","handleSubmit","preventDefault","uploadedImageUrls","insert","map","date","toISOString","split","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","multiple","accept","files","_c","$RefreshReg$"],"sources":["/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/host/Homestay.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: \"\",\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]); // ✅ Depend only on `user` to prevent infinite loops\n\n//   /** Fetch the homestay for the logged-in host */\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       // Fetch the correct host ID from Supabase\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\") // Ensure this is the correct table\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id) // Match Clerk user ID with Supabase field\n//         .single();\n  \n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n  \n//       const hostId = hostData.hostid; // ✅ This is the correct UUID\n  \n//       // Now fetch the homestay with the correct hostId\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId) // Use the correct UUID\n//         .single();\n  \n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n  \n  \n  \n\n//   /** Handle form input changes */\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   /** Handle availability date selection */\n//   function handleDateChange(date) {\n//     if (!date) return; // Avoid null errors\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date] // Append date to array\n//     }));\n//   }\n  \n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n  \n//   /** Handle homestay submission */\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n  \n//     // Fetch the correct host ID from Supabase\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n  \n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n  \n//     const hostId = hostData.hostid; // ✅ Use UUID from Supabase, not Clerk user ID\n  \n//     // Insert homestay using correct hostid\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId, // ✅ Ensure this is a UUID\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]), // Convert to YYYY-MM-DD\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images.split(\",\"), \n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n  \n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(); // ✅ Force UI update after insertion\n//     }\n//   }\n  \n  \n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         {homestay ? (\n//           <div className=\"mt-6\">\n//             <h3 className=\"text-gray-600\"><strong>Name:</strong>{homestay.name}</h3>\n//             <p className=\"text-gray-600 mt-2\"><strong>About:</strong>{homestay.description}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Facilities:</strong> {homestay.facilities}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Availability Dates:</strong> {homestay.availabilitydate.join(\", \")}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Location:</strong> {homestay.location}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Google Map:</strong> <a href={homestay.googlemapurl} target=\"_blank\" rel=\"noopener noreferrer\">View on Google Maps</a></p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Price per Night:</strong> Nu. {homestay.pricepernight}</p>\n//             <div className=\"mt-4\">\n//               <h4 className=\"text-lg font-semibold\">Images</h4>\n//               <div className=\"flex gap-2 mt-2\">\n//                 {homestay.images.map((img, index) => (\n//                   <img key={index} src={img} alt=\"Homestay\" className=\"w-32 h-32 object-cover rounded-lg\" />\n//                 ))}\n//               </div>\n//             </div>\n//             <button className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">Edit</button>\n//           </div>\n//         ) : (\n//           <div className=\"mt-6\">\n//             <p className=\"text-gray-600\">You have not listed any homestay yet. Add your homestay below:</p>\n//             <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//               <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//               <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//               <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n              \n//             {/* Multi-Date Availability Selection */}\n//             <div>\n//               <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//               <DatePicker\n//                 selected={null}\n//                 onChange={(date) => {\n//                   if (date) {\n//                     setFormData(prevState => ({\n//                       ...prevState,\n//                       availabilitydate: [...prevState.availabilitydate, date]\n//                     }));\n//                   }\n//                 }}\n//                 dateFormat=\"yyyy-MM-dd\"\n//                 className=\"w-full border p-2 rounded\"\n//                 placeholderText=\"Select available dates\"\n//               />\n\n//               {/* Display Selected Dates */}\n//               <div className=\"mt-2 flex flex-wrap gap-2\">\n//                 {formData.availabilitydate.map((date, index) => (\n//                   <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                     <span>{date.toISOString().split(\"T\")[0]}</span>\n//                     <button\n//                       type=\"button\"\n//                       className=\"ml-2 text-red-500\"\n//                       onClick={() => removeDate(index)}\n//                     >\n//                       ❌\n//                     </button>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n\n\n//               {/* Location Dropdown */}\n//               <select\n//                 name=\"location\"\n//                 value={formData.location}\n//                 onChange={handleChange}\n//                 className=\"w-full border p-2 rounded\"\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Dzongkhag</option>\n//                 {dzongkhags.map((dzongkhag, index) => (\n//                   <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//                 ))}\n//               </select>\n\n//               <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//               <input type=\"text\" name=\"images\" placeholder=\"Image URLs (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.images} onChange={handleChange} required />\n//               <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n              \n//               <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//             </form>\n//           </div>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useUser } from \"@clerk/clerk-react\";\nimport { supabase } from \"../../utils/supabaseClient\";\nimport Sidebar from \"../../components/Sidebar\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst dzongkhags = [\n  \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n  \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n  \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n];\n\nfunction Homestay() {\n  const { user } = useUser();\n  const [homestay, setHomestay] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    facilities: \"\",\n    availabilitydate: [],\n    location: \"\",\n    googlemapurl: \"\",\n    images: [],\n    pricepernight: \"\",\n  });\n  const [imageFiles, setImageFiles] = useState([]);\n\n  useEffect(() => {\n    if (user) {\n      fetchHomestay();\n    }\n  }, [user]);\n\n  async function fetchHomestay() {\n    setLoading(true);\n    try {\n      const { data: hostData, error: hostError } = await supabase\n        .from(\"host\")\n        .select(\"hostid\")\n        .eq(\"clerkuserid\", user.id)\n        .single();\n\n      if (hostError || !hostData) {\n        console.error(\"Error fetching host ID:\", hostError);\n        setLoading(false);\n        return;\n      }\n\n      const hostId = hostData.hostid;\n\n      const { data, error } = await supabase\n        .from(\"homestay\")\n        .select(\"*\")\n        .eq(\"hostid\", hostId)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching homestay:\", error);\n      } else {\n        setHomestay(data);\n      }\n    } catch (err) {\n      console.error(\"Unexpected error:\", err);\n    }\n    setLoading(false);\n  }\n\n  function handleChange(e) {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  }\n\n  async function uploadImages() {\n    const uploadedUrls = [];\n    for (const file of imageFiles) {\n      const { data, error } = await supabase.storage\n        .from(\"homestay-images\")\n        .upload(`${user.id}/${file.name}`, file);\n\n      if (error) {\n        console.error(\"Image upload error:\", error);\n      } else {\n        const url = `${supabase.storage.from(\"homestay-images\").getPublicUrl(user.id + '/' + file.name).publicURL}`;\n        uploadedUrls.push(url);\n      }\n    }\n    return uploadedUrls;\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (!user) return;\n\n    const { data: hostData, error: hostError } = await supabase\n      .from(\"host\")\n      .select(\"hostid\")\n      .eq(\"clerkuserid\", user.id)\n      .single();\n\n    if (hostError || !hostData) {\n      console.error(\"Error fetching host ID:\", hostError);\n      return;\n    }\n\n    const hostId = hostData.hostid;\n    const uploadedImageUrls = await uploadImages();\n\n    const { error } = await supabase.from(\"homestay\").insert([\n      {\n        hostid: hostId,\n        name: formData.name,\n        description: formData.description,\n        facilities: formData.facilities,\n        availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n        location: formData.location,\n        googlemapurl: formData.googlemapurl,\n        images: uploadedImageUrls,\n        pricepernight: formData.pricepernight,\n      },\n    ]);\n\n    if (error) {\n      console.error(\"Error adding homestay:\", error);\n    } else {\n      console.log(\"Homestay added successfully!\");\n      fetchHomestay();\n    }\n  }\n\n  if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 p-8\">\n        <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n        {!homestay && (\n          <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n            <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n            <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n            <input type=\"text\" name=\"facilities\" placeholder=\"Facilities\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n            <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n            <input type=\"file\" multiple accept=\"image/*\" onChange={(e) => setImageFiles([...e.target.files])} className=\"w-full border p-2 rounded\" required />\n            <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n          </form>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default Homestay;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,OAAOC,OAAO,MAAM,0BAA0B;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}