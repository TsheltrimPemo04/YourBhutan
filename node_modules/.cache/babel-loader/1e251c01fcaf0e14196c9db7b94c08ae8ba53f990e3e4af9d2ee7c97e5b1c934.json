{"ast":null,"code":"var _jsxFileName = \"/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/auth/Signup.jsx\",\n  _s = $RefreshSig$();\nimport { SignUp, useUser } from \"@clerk/clerk-react\";\nimport { useEffect } from \"react\";\nimport { supabase } from \"../../utils/supabaseClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HostSignup() {\n  _s();\n  const {\n    user,\n    isSignedIn\n  } = useUser();\n  useEffect(() => {\n    if (isSignedIn && user) {\n      console.log(\"User from Clerk:\", user); // ✅ Debugging\n      saveHostToSupabase(user);\n    }\n  }, [user, isSignedIn]);\n  async function saveHostToSupabase(user) {\n    var _user$primaryEmailAdd;\n    if (!user) return;\n\n    // Step 1: Check if the host already exists in Supabase\n    const {\n      data: existingHost,\n      error: fetchError\n    } = await supabase.from(\"HOST\").select(\"HostId\").eq(\"ClerkUserId\", user.id).single();\n    if (fetchError && fetchError.code !== \"PGRST116\") {\n      console.error(\"Error checking host existence:\", fetchError);\n      return;\n    }\n    if (existingHost) {\n      console.log(\"Host already exists in Supabase:\", existingHost);\n      return;\n    }\n\n    // Step 2: Insert new host into Supabase\n    const {\n      data,\n      error\n    } = await supabase.from(\"HOST\").insert([{\n      ClerkUserId: user.id,\n      HostName: user.fullName || \"Unknown Host\",\n      HostEmail: ((_user$primaryEmailAdd = user.primaryEmailAddress) === null || _user$primaryEmailAdd === void 0 ? void 0 : _user$primaryEmailAdd.emailAddress) || \"no-email\",\n      HostContact: null // You can update this later\n    }]).select();\n    if (error) {\n      console.error(\"Error saving host:\", error);\n    } else {\n      console.log(\"Host saved successfully:\", data);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen\",\n    children: /*#__PURE__*/_jsxDEV(SignUp, {\n      routing: \"path\",\n      path: \"/host/signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(HostSignup, \"ixu2BTDxOtGHm9+BAyYNwv6i3Aw=\", false, function () {\n  return [useUser];\n});\n_c = HostSignup;\nexport default HostSignup;\nvar _c;\n$RefreshReg$(_c, \"HostSignup\");","map":{"version":3,"names":["SignUp","useUser","useEffect","supabase","jsxDEV","_jsxDEV","HostSignup","_s","user","isSignedIn","console","log","saveHostToSupabase","_user$primaryEmailAdd","data","existingHost","error","fetchError","from","select","eq","id","single","code","insert","ClerkUserId","HostName","fullName","HostEmail","primaryEmailAddress","emailAddress","HostContact","className","children","routing","path","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/auth/Signup.jsx"],"sourcesContent":["import { SignUp, useUser } from \"@clerk/clerk-react\";\nimport { useEffect } from \"react\";\nimport { supabase } from \"../../utils/supabaseClient\";\n\nfunction HostSignup() {\n  const { user, isSignedIn } = useUser();\n\n  useEffect(() => {\n    if (isSignedIn && user) {\n      console.log(\"User from Clerk:\", user); // ✅ Debugging\n      saveHostToSupabase(user);\n    }\n  }, [user, isSignedIn]);\n\n  async function saveHostToSupabase(user) {\n    if (!user) return;\n\n    // Step 1: Check if the host already exists in Supabase\n    const { data: existingHost, error: fetchError } = await supabase\n      .from(\"HOST\")\n      .select(\"HostId\")\n      .eq(\"ClerkUserId\", user.id)\n      .single();\n\n    if (fetchError && fetchError.code !== \"PGRST116\") {\n      console.error(\"Error checking host existence:\", fetchError);\n      return;\n    }\n\n    if (existingHost) {\n      console.log(\"Host already exists in Supabase:\", existingHost);\n      return;\n    }\n\n    // Step 2: Insert new host into Supabase\n    const { data, error } = await supabase.from(\"HOST\").insert([\n      {\n        ClerkUserId: user.id,\n        HostName: user.fullName || \"Unknown Host\",\n        HostEmail: user.primaryEmailAddress?.emailAddress || \"no-email\",\n        HostContact: null, // You can update this later\n      }\n    ]).select();\n\n    if (error) {\n      console.error(\"Error saving host:\", error);\n    } else {\n      console.log(\"Host saved successfully:\", data);\n    }\n  }\n\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n      <SignUp routing=\"path\" path=\"/host/signup\" />\n    </div>\n  );\n}\n\nexport default HostSignup;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,OAAO,QAAQ,oBAAoB;AACpD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI;IAAEC;EAAW,CAAC,GAAGR,OAAO,CAAC,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAIO,UAAU,IAAID,IAAI,EAAE;MACtBE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,IAAI,CAAC,CAAC,CAAC;MACvCI,kBAAkB,CAACJ,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,CAACA,IAAI,EAAEC,UAAU,CAAC,CAAC;EAEtB,eAAeG,kBAAkBA,CAACJ,IAAI,EAAE;IAAA,IAAAK,qBAAA;IACtC,IAAI,CAACL,IAAI,EAAE;;IAEX;IACA,MAAM;MAAEM,IAAI,EAAEC,YAAY;MAAEC,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMd,QAAQ,CAC7De,IAAI,CAAC,MAAM,CAAC,CACZC,MAAM,CAAC,QAAQ,CAAC,CAChBC,EAAE,CAAC,aAAa,EAAEZ,IAAI,CAACa,EAAE,CAAC,CAC1BC,MAAM,CAAC,CAAC;IAEX,IAAIL,UAAU,IAAIA,UAAU,CAACM,IAAI,KAAK,UAAU,EAAE;MAChDb,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEC,UAAU,CAAC;MAC3D;IACF;IAEA,IAAIF,YAAY,EAAE;MAChBL,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEI,YAAY,CAAC;MAC7D;IACF;;IAEA;IACA,MAAM;MAAED,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMb,QAAQ,CAACe,IAAI,CAAC,MAAM,CAAC,CAACM,MAAM,CAAC,CACzD;MACEC,WAAW,EAAEjB,IAAI,CAACa,EAAE;MACpBK,QAAQ,EAAElB,IAAI,CAACmB,QAAQ,IAAI,cAAc;MACzCC,SAAS,EAAE,EAAAf,qBAAA,GAAAL,IAAI,CAACqB,mBAAmB,cAAAhB,qBAAA,uBAAxBA,qBAAA,CAA0BiB,YAAY,KAAI,UAAU;MAC/DC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC,CACF,CAAC,CAACZ,MAAM,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE;MACTN,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,MAAM;MACLN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEG,IAAI,CAAC;IAC/C;EACF;EAEA,oBACET,OAAA;IAAK2B,SAAS,EAAC,2CAA2C;IAAAC,QAAA,eACxD5B,OAAA,CAACL,MAAM;MAACkC,OAAO,EAAC,MAAM;MAACC,IAAI,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAAChC,EAAA,CApDQD,UAAU;EAAA,QACYL,OAAO;AAAA;AAAAuC,EAAA,GAD7BlC,UAAU;AAsDnB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}