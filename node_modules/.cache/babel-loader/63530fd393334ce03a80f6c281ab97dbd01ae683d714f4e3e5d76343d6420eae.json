{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: \"\",\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]); // ✅ Depend only on `user` to prevent infinite loops\n\n//   /** Fetch the homestay for the logged-in host */\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       // Fetch the correct host ID from Supabase\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\") // Ensure this is the correct table\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id) // Match Clerk user ID with Supabase field\n//         .single();\n\n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const hostId = hostData.hostid; // ✅ This is the correct UUID\n\n//       // Now fetch the homestay with the correct hostId\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId) // Use the correct UUID\n//         .single();\n\n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n\n//   /** Handle form input changes */\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   /** Handle availability date selection */\n//   function handleDateChange(date) {\n//     if (!date) return; // Avoid null errors\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date] // Append date to array\n//     }));\n//   }\n\n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n\n//   /** Handle homestay submission */\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n\n//     // Fetch the correct host ID from Supabase\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n\n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n\n//     const hostId = hostData.hostid; // ✅ Use UUID from Supabase, not Clerk user ID\n\n//     // Insert homestay using correct hostid\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId, // ✅ Ensure this is a UUID\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]), // Convert to YYYY-MM-DD\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images.split(\",\"), \n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n\n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(); // ✅ Force UI update after insertion\n//     }\n//   }\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         {homestay ? (\n//           <div className=\"mt-6\">\n//             <h3 className=\"text-xl font-semibold\">{homestay.name}</h3>\n//             <p className=\"text-gray-600 mt-2\">{homestay.description}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Facilities:</strong> {homestay.facilities}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Availability Dates:</strong> {homestay.availabilitydate.join(\", \")}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Location:</strong> {homestay.location}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Google Map:</strong> <a href={homestay.googlemapurl} target=\"_blank\" rel=\"noopener noreferrer\">View on Google Maps</a></p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Price per Night:</strong> Nu. {homestay.pricepernight}</p>\n//             <div className=\"mt-4\">\n//               <h4 className=\"text-lg font-semibold\">Images</h4>\n//               <div className=\"flex gap-2 mt-2\">\n//                 {homestay.images.map((img, index) => (\n//                   <img key={index} src={img} alt=\"Homestay\" className=\"w-32 h-32 object-cover rounded-lg\" />\n//                 ))}\n//               </div>\n//             </div>\n//             <button className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">Edit</button>\n//           </div>\n//         ) : (\n//           <div className=\"mt-6\">\n//             <p className=\"text-gray-600\">You have not listed any homestay yet. Add your homestay below:</p>\n//             <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//               <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//               <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//               <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n\n//             {/* Multi-Date Availability Selection */}\n//             <div>\n//               <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//               <DatePicker\n//                 selected={null}\n//                 onChange={(date) => {\n//                   if (date) {\n//                     setFormData(prevState => ({\n//                       ...prevState,\n//                       availabilitydate: [...prevState.availabilitydate, date]\n//                     }));\n//                   }\n//                 }}\n//                 dateFormat=\"yyyy-MM-dd\"\n//                 className=\"w-full border p-2 rounded\"\n//                 placeholderText=\"Select available dates\"\n//               />\n\n//               {/* Display Selected Dates */}\n//               <div className=\"mt-2 flex flex-wrap gap-2\">\n//                 {formData.availabilitydate.map((date, index) => (\n//                   <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                     <span>{date.toISOString().split(\"T\")[0]}</span>\n//                     <button\n//                       type=\"button\"\n//                       className=\"ml-2 text-red-500\"\n//                       onClick={() => removeDate(index)}\n//                     >\n//                       ❌\n//                     </button>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n\n//               {/* Location Dropdown */}\n//               <select\n//                 name=\"location\"\n//                 value={formData.location}\n//                 onChange={handleChange}\n//                 className=\"w-full border p-2 rounded\"\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Dzongkhag</option>\n//                 {dzongkhags.map((dzongkhag, index) => (\n//                   <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//                 ))}\n//               </select>\n\n//               <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//               <input type=\"text\" name=\"images\" placeholder=\"Image URLs (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.images} onChange={handleChange} required />\n//               <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n\n//               <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//             </form>\n//           </div>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: [],\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]);\n\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\")\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id)\n//         .single();\n\n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const hostId = hostData.hostid;\n\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId)\n//         .maybeSingle();  // Avoids error if no data is found\n\n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n\n//         if (data) {\n//           setFormData({\n//             name: data.name || \"\",\n//             description: data.description || \"\",\n//             facilities: data.facilities || \"\",\n//             availabilitydate: data.availabilitydate.map(d => new Date(d)) || [], // Convert back to Date objects\n//             location: data.location || \"\",\n//             googlemapurl: data.googlemapurl || \"\",\n//             images: data.images || [],\n//             pricepernight: data.pricepernight || \"\",\n//           });\n//         }\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n\n//   async function handleImageUpload(event) {\n//     const file = event.target.files[0]; // Get the selected file\n//     if (!file) return;\n\n//     const fileName = `${user.id}-${Date.now()}-${file.name}`; // Unique filename\n\n//     // Upload the image to Supabase Storage\n//     const { data, error } = await supabase.storage\n//       .from(\"homestay-images\")  // Ensure this matches your bucket name\n//       .upload(fileName, file);\n\n//     if (error) {\n//       console.error(\"Error uploading image:\", error);\n//       return;\n//     }\n\n//     // Get public URL of uploaded image\n//     const { publicUrl } = supabase.storage\n//       .from(\"homestay-images\")\n//       .getPublicUrl(fileName);\n\n//     // Save the image URL in state\n//     setFormData(prevState => ({\n//       ...prevState,\n//       images: [...prevState.images, publicUrl],\n//     }));\n\n//     console.log(\"Uploaded Image URL:\", publicUrl);\n//   }\n\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   function handleDateChange(date) {\n//     if (!date) return;\n\n//     // Convert the selected date to a Date object before storing\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, new Date(date)],\n//     }));\n//   }\n\n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index),\n//     }));\n//   }\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n\n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n\n//     const hostId = hostData.hostid;\n\n//     const formattedDates = formData.availabilitydate.map(date => \n//       date instanceof Date ? date.toISOString().split(\"T\")[0] : date\n//     );\n\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId,\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formattedDates,\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images,  // Store uploaded image URLs\n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n\n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay();\n//     }\n//   }\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//           <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//           <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//           <input type=\"text\" name=\"facilities\" placeholder=\"Facilities\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n\n//           {/* Multi-Date Availability Selection */}\n//           <div>\n//             <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//             <DatePicker selected={null} onChange={handleDateChange} dateFormat=\"yyyy-MM-dd\" className=\"w-full border p-2 rounded\" placeholderText=\"Select available dates\" />\n//             <div className=\"mt-2 flex flex-wrap gap-2\">\n//               {formData.availabilitydate.map((date, index) => (\n//                 <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                   <span>{date.toISOString().split(\"T\")[0]}</span>\n//                   <button type=\"button\" className=\"ml-2 text-red-500\" onClick={() => removeDate(index)}>❌</button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {/* Location Dropdown */}\n//           <select name=\"location\" value={formData.location} onChange={handleChange} className=\"w-full border p-2 rounded\" required>\n//             <option value=\"\" disabled>Select Dzongkhag</option>\n//             {dzongkhags.map((dzongkhag, index) => (\n//               <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//             ))}\n//           </select>\n\n//           <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//           <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n//           <input type=\"file\" onChange={handleImageUpload} className=\"w-full border p-2 rounded\" accept=\"image/*\" multiple />\n\n//           <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//         </form>\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;","map":{"version":3,"names":[],"sources":["/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/host/Homestay.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: \"\",\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]); // ✅ Depend only on `user` to prevent infinite loops\n\n//   /** Fetch the homestay for the logged-in host */\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       // Fetch the correct host ID from Supabase\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\") // Ensure this is the correct table\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id) // Match Clerk user ID with Supabase field\n//         .single();\n  \n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n  \n//       const hostId = hostData.hostid; // ✅ This is the correct UUID\n  \n//       // Now fetch the homestay with the correct hostId\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId) // Use the correct UUID\n//         .single();\n  \n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n  \n  \n  \n\n//   /** Handle form input changes */\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   /** Handle availability date selection */\n//   function handleDateChange(date) {\n//     if (!date) return; // Avoid null errors\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date] // Append date to array\n//     }));\n//   }\n  \n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n  \n//   /** Handle homestay submission */\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n  \n//     // Fetch the correct host ID from Supabase\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n  \n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n  \n//     const hostId = hostData.hostid; // ✅ Use UUID from Supabase, not Clerk user ID\n  \n//     // Insert homestay using correct hostid\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId, // ✅ Ensure this is a UUID\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]), // Convert to YYYY-MM-DD\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images.split(\",\"), \n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n  \n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(); // ✅ Force UI update after insertion\n//     }\n//   }\n  \n  \n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         {homestay ? (\n//           <div className=\"mt-6\">\n//             <h3 className=\"text-xl font-semibold\">{homestay.name}</h3>\n//             <p className=\"text-gray-600 mt-2\">{homestay.description}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Facilities:</strong> {homestay.facilities}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Availability Dates:</strong> {homestay.availabilitydate.join(\", \")}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Location:</strong> {homestay.location}</p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Google Map:</strong> <a href={homestay.googlemapurl} target=\"_blank\" rel=\"noopener noreferrer\">View on Google Maps</a></p>\n//             <p className=\"text-gray-600 mt-2\"><strong>Price per Night:</strong> Nu. {homestay.pricepernight}</p>\n//             <div className=\"mt-4\">\n//               <h4 className=\"text-lg font-semibold\">Images</h4>\n//               <div className=\"flex gap-2 mt-2\">\n//                 {homestay.images.map((img, index) => (\n//                   <img key={index} src={img} alt=\"Homestay\" className=\"w-32 h-32 object-cover rounded-lg\" />\n//                 ))}\n//               </div>\n//             </div>\n//             <button className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">Edit</button>\n//           </div>\n//         ) : (\n//           <div className=\"mt-6\">\n//             <p className=\"text-gray-600\">You have not listed any homestay yet. Add your homestay below:</p>\n//             <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//               <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//               <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//               <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n              \n//             {/* Multi-Date Availability Selection */}\n//             <div>\n//               <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//               <DatePicker\n//                 selected={null}\n//                 onChange={(date) => {\n//                   if (date) {\n//                     setFormData(prevState => ({\n//                       ...prevState,\n//                       availabilitydate: [...prevState.availabilitydate, date]\n//                     }));\n//                   }\n//                 }}\n//                 dateFormat=\"yyyy-MM-dd\"\n//                 className=\"w-full border p-2 rounded\"\n//                 placeholderText=\"Select available dates\"\n//               />\n\n//               {/* Display Selected Dates */}\n//               <div className=\"mt-2 flex flex-wrap gap-2\">\n//                 {formData.availabilitydate.map((date, index) => (\n//                   <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                     <span>{date.toISOString().split(\"T\")[0]}</span>\n//                     <button\n//                       type=\"button\"\n//                       className=\"ml-2 text-red-500\"\n//                       onClick={() => removeDate(index)}\n//                     >\n//                       ❌\n//                     </button>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n\n\n//               {/* Location Dropdown */}\n//               <select\n//                 name=\"location\"\n//                 value={formData.location}\n//                 onChange={handleChange}\n//                 className=\"w-full border p-2 rounded\"\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Dzongkhag</option>\n//                 {dzongkhags.map((dzongkhag, index) => (\n//                   <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//                 ))}\n//               </select>\n\n//               <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//               <input type=\"text\" name=\"images\" placeholder=\"Image URLs (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.images} onChange={handleChange} required />\n//               <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n              \n//               <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//             </form>\n//           </div>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { useUser } from \"@clerk/clerk-react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const { user } = useUser();\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: [],\n//     pricepernight: \"\",\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       fetchHomestay();\n//     }\n//   }, [user]);\n\n//   async function fetchHomestay() {\n//     setLoading(true);\n//     try {\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\")\n//         .select(\"hostid\")\n//         .eq(\"clerkuserid\", user.id)\n//         .single();\n  \n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n  \n//       const hostId = hostData.hostid;\n  \n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId)\n//         .maybeSingle();  // Avoids error if no data is found\n  \n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         console.log(\"Fetched homestay:\", data);\n//         setHomestay(data);\n  \n//         if (data) {\n//           setFormData({\n//             name: data.name || \"\",\n//             description: data.description || \"\",\n//             facilities: data.facilities || \"\",\n//             availabilitydate: data.availabilitydate.map(d => new Date(d)) || [], // Convert back to Date objects\n//             location: data.location || \"\",\n//             googlemapurl: data.googlemapurl || \"\",\n//             images: data.images || [],\n//             pricepernight: data.pricepernight || \"\",\n//           });\n//         }\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n  \n//   async function handleImageUpload(event) {\n//     const file = event.target.files[0]; // Get the selected file\n//     if (!file) return;\n  \n//     const fileName = `${user.id}-${Date.now()}-${file.name}`; // Unique filename\n  \n//     // Upload the image to Supabase Storage\n//     const { data, error } = await supabase.storage\n//       .from(\"homestay-images\")  // Ensure this matches your bucket name\n//       .upload(fileName, file);\n  \n//     if (error) {\n//       console.error(\"Error uploading image:\", error);\n//       return;\n//     }\n  \n//     // Get public URL of uploaded image\n//     const { publicUrl } = supabase.storage\n//       .from(\"homestay-images\")\n//       .getPublicUrl(fileName);\n  \n//     // Save the image URL in state\n//     setFormData(prevState => ({\n//       ...prevState,\n//       images: [...prevState.images, publicUrl],\n//     }));\n  \n//     console.log(\"Uploaded Image URL:\", publicUrl);\n//   }\n  \n  \n\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   function handleDateChange(date) {\n//     if (!date) return;\n  \n//     // Convert the selected date to a Date object before storing\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, new Date(date)],\n//     }));\n//   }\n  \n  \n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index),\n//     }));\n//   }\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n  \n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"clerkuserid\", user.id)\n//       .single();\n  \n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n  \n//     const hostId = hostData.hostid;\n  \n//     const formattedDates = formData.availabilitydate.map(date => \n//       date instanceof Date ? date.toISOString().split(\"T\")[0] : date\n//     );\n  \n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId,\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formattedDates,\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: formData.images,  // Store uploaded image URLs\n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n  \n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay();\n//     }\n//   }\n  \n  \n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n\n//         <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//           <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//           <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//           <input type=\"text\" name=\"facilities\" placeholder=\"Facilities\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n          \n//           {/* Multi-Date Availability Selection */}\n//           <div>\n//             <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//             <DatePicker selected={null} onChange={handleDateChange} dateFormat=\"yyyy-MM-dd\" className=\"w-full border p-2 rounded\" placeholderText=\"Select available dates\" />\n//             <div className=\"mt-2 flex flex-wrap gap-2\">\n//               {formData.availabilitydate.map((date, index) => (\n//                 <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                   <span>{date.toISOString().split(\"T\")[0]}</span>\n//                   <button type=\"button\" className=\"ml-2 text-red-500\" onClick={() => removeDate(index)}>❌</button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {/* Location Dropdown */}\n//           <select name=\"location\" value={formData.location} onChange={handleChange} className=\"w-full border p-2 rounded\" required>\n//             <option value=\"\" disabled>Select Dzongkhag</option>\n//             {dzongkhags.map((dzongkhag, index) => (\n//               <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//             ))}\n//           </select>\n\n//           <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n//           <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n//           <input type=\"file\" onChange={handleImageUpload} className=\"w-full border p-2 rounded\" accept=\"image/*\" multiple />\n\n//           <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//         </form>\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}