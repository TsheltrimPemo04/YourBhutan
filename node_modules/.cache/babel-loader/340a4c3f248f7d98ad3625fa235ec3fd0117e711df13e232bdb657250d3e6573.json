{"ast":null,"code":"var _jsxFileName = \"/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/host/Homestay.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const [user, setUser] = useState(null);\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: [],\n//     pricepernight: \"\",\n//   });\n//   const [imageFiles, setImageFiles] = useState([]);\n\n//   useEffect(() => {\n//     async function fetchUser() {\n//       const { data, error } = await supabase.auth.getUser();\n//       if (error) {\n//         console.error(\"Error fetching user:\", error);\n//       } else {\n//         setUser(data.user);\n//         fetchHomestay(data.user.id); // Fetch homestay only when user is available\n//       }\n//     }\n//     fetchUser();\n//   }, []);\n\n//   async function fetchHomestay(userId) {\n//     setLoading(true);\n//     try {\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\")\n//         .select(\"hostid\")\n//         .eq(\"hostid\", userId) // Use Supabase's user ID instead of Clerk\n//         .single();\n\n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const hostId = hostData.hostid;\n\n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId)\n//         .single();\n\n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   function handleDateChange(date) {\n//     if (!date) return;\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date]\n//     }));\n//   }\n\n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n\n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"hostid\", user.id) // Use Supabase user ID instead of Clerk\n//       .single();\n\n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n\n//     const hostId = hostData.hostid;\n\n//     let imageUrls = [];\n\n//     for (const file of imageFiles) {\n//       const { data, error } = await supabase.storage\n//         .from(\"homestay-images\")\n//         .upload(`homestays/${user.id}/${file.name}`, file, { cacheControl: \"3600\" });\n\n//       if (error) {\n//         console.error(\"Error uploading image:\", error);\n//       } else {\n//         console.log(\"Uploaded file path:\", data.path);\n\n//         // Get the public URL\n//         const { data: publicURL } = supabase.storage\n//           .from(\"homestay-images\")\n//           .getPublicUrl(data.path);\n\n//         console.log(\"Generated Public URL:\", publicURL.publicUrl);\n//         imageUrls.push(publicURL.publicUrl);\n//       }\n//     }\n\n//     console.log(\"Final image URLs:\", imageUrls);\n\n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId,\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: imageUrls,\n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n\n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(user.id);\n//     }\n//   }\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n//         <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//           <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//           <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//           <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n\n//           <div>\n//             <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//             <DatePicker\n//               selected={null}\n//               onChange={(date) => handleDateChange(date)}\n//               dateFormat=\"yyyy-MM-dd\"\n//               className=\"w-full border p-2 rounded\"\n//               placeholderText=\"Select available dates\"\n//             />\n\n//             <div className=\"mt-2 flex flex-wrap gap-2\">\n//               {formData.availabilitydate.map((date, index) => (\n//                 <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                   <span>{date.toISOString().split(\"T\")[0]}</span>\n//                   <button\n//                     type=\"button\"\n//                     className=\"ml-2 text-red-500\"\n//                     onClick={() => removeDate(index)}\n//                   >\n//                     ‚ùå\n//                   </button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           <select name=\"location\" value={formData.location} onChange={handleChange} className=\"w-full border p-2 rounded\" required>\n//             <option value=\"\" disabled>Select Dzongkhag</option>\n//             {dzongkhags.map((dzongkhag, index) => (\n//               <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//             ))}\n//           </select>\n//           <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n\n//           <input type=\"file\" multiple accept=\"image/*\" onChange={(e) => setImageFiles([...e.target.files])} className=\"w-full border p-2 rounded\" />\n//           <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n\n//           <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//         </form>\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { supabase } from \"../../utils/supabaseClient\";\nimport Sidebar from \"../../components/Sidebar\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dzongkhags = [\"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\", \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"];\nfunction Homestay() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [homestay, setHomestay] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [homestayId, setHomestayId] = useState(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    facilities: \"\",\n    availabilitydate: [],\n    location: \"\",\n    googlemapurl: \"\",\n    images: [],\n    pricepernight: \"\"\n  });\n  const [imageFiles, setImageFiles] = useState([]);\n  useEffect(() => {\n    async function fetchUser() {\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error) {\n        console.error(\"Error fetching user:\", error);\n      } else {\n        setUser(data.user);\n        fetchHomestay(data.user.id); // Fetch homestay only when user is available\n      }\n    }\n\n    fetchUser();\n  }, []);\n  async function fetchHomestay(userId) {\n    setLoading(true);\n    try {\n      const {\n        data: hostData,\n        error: hostError\n      } = await supabase.from(\"host\").select(\"hostid\").eq(\"userid\", userId) // Make sure this matches your table structure\n      .single();\n      if (hostError || !hostData) {\n        console.error(\"Error fetching host ID:\", hostError);\n        setLoading(false);\n        return;\n      }\n      const hostId = hostData.hostid;\n      const {\n        data,\n        error\n      } = await supabase.from(\"homestay\").select(\"*\").eq(\"hostid\", hostId).single();\n      if (error) {\n        console.error(\"Error fetching homestay:\", error);\n      } else {\n        setHomestay(data);\n        setHomestayId(data.homestayid);\n        setFormData({\n          name: data.name,\n          description: data.description,\n          facilities: data.facilities,\n          availabilitydate: data.availabilitydate,\n          location: data.location,\n          googlemapurl: data.googlemapurl,\n          images: data.images,\n          pricepernight: data.pricepernight\n        });\n      }\n    } catch (err) {\n      console.error(\"Unexpected error:\", err);\n    }\n    setLoading(false);\n  }\n  function handleChange(e) {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  }\n  function handleDateChange(date) {\n    if (!date) return;\n    setFormData(prevState => ({\n      ...prevState,\n      availabilitydate: [...prevState.availabilitydate, date]\n    }));\n  }\n  function removeDate(index) {\n    setFormData(prevState => ({\n      ...prevState,\n      availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n    }));\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (!user) return;\n    const {\n      data: hostData,\n      error: hostError\n    } = await supabase.from(\"host\").select(\"hostid\").eq(\"userid\", user.id).single();\n    if (hostError || !hostData) {\n      console.error(\"Error fetching host ID:\", hostError);\n      return;\n    }\n    const hostId = hostData.hostid;\n    let imageUrls = [];\n    for (const file of imageFiles) {\n      const {\n        data,\n        error\n      } = await supabase.storage.from(\"homestay-images\").upload(`homestays/${user.id}/${file.name}`, file, {\n        cacheControl: \"3600\"\n      });\n      if (error) {\n        console.error(\"Error uploading image:\", error);\n      } else {\n        imageUrls.push(data.path);\n      }\n    }\n    console.log(\"Final image URLs:\", imageUrls);\n    if (editing) {\n      // Update homestay\n      const {\n        error\n      } = await supabase.from(\"homestay\").update({\n        name: formData.name,\n        description: formData.description,\n        facilities: formData.facilities,\n        availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n        location: formData.location,\n        googlemapurl: formData.googlemapurl,\n        images: [...formData.images, ...imageUrls],\n        pricepernight: formData.pricepernight\n      }).eq(\"homestayid\", homestayId);\n      if (error) {\n        console.error(\"Error updating homestay:\", error);\n      } else {\n        console.log(\"Homestay updated successfully!\");\n        setEditing(false);\n        fetchHomestay(user.id);\n      }\n    } else {\n      // Insert new homestay\n      const {\n        error\n      } = await supabase.from(\"homestay\").insert([{\n        hostid: hostId,\n        name: formData.name,\n        description: formData.description,\n        facilities: formData.facilities,\n        availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n        location: formData.location,\n        googlemapurl: formData.googlemapurl,\n        images: imageUrls,\n        pricepernight: formData.pricepernight\n      }]);\n      if (error) {\n        console.error(\"Error adding homestay:\", error);\n      } else {\n        console.log(\"Homestay added successfully!\");\n        fetchHomestay(user.id);\n      }\n    }\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold\",\n        children: \"Homestay Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"mt-4 space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Homestay Name\",\n          value: formData.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          placeholder: \"Description\",\n          value: formData.description,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"facilities\",\n          placeholder: \"Facilities\",\n          value: formData.facilities,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"location\",\n          value: formData.location,\n          onChange: handleChange,\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select Dzongkhag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), dzongkhags.map((dzongkhag, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dzongkhag,\n            children: dzongkhag\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-green-500 text-white px-4 py-2 rounded\",\n          children: editing ? \"Update Homestay\" : \"Add Homestay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), homestay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold\",\n          children: homestay.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: homestay.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setEditing(true),\n          className: \"bg-blue-500 text-white px-4 py-2 rounded mt-4\",\n          children: \"Edit Homestay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n}\n_s(Homestay, \"knewn3DbINe6yDnmC66kgd8Gwto=\");\n_c = Homestay;\nexport default Homestay;\nvar _c;\n$RefreshReg$(_c, \"Homestay\");","map":{"version":3,"names":["React","useEffect","useState","supabase","Sidebar","DatePicker","jsxDEV","_jsxDEV","dzongkhags","Homestay","_s","user","setUser","homestay","setHomestay","loading","setLoading","editing","setEditing","homestayId","setHomestayId","formData","setFormData","name","description","facilities","availabilitydate","location","googlemapurl","images","pricepernight","imageFiles","setImageFiles","fetchUser","data","error","auth","getUser","console","fetchHomestay","id","userId","hostData","hostError","from","select","eq","single","hostId","hostid","homestayid","err","handleChange","e","target","value","handleDateChange","date","prevState","removeDate","index","filter","_","i","handleSubmit","preventDefault","imageUrls","file","storage","upload","cacheControl","push","path","log","update","map","toISOString","split","insert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","disabled","dzongkhag","onClick","_c","$RefreshReg$"],"sources":["/Users/tsheltrimpemo/Desktop/YourBhutan/src/pages/host/Homestay.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { supabase } from \"../../utils/supabaseClient\";\n// import Sidebar from \"../../components/Sidebar\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n\n// const dzongkhags = [\n//   \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n//   \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n//   \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n// ];\n\n// function Homestay() {\n//   const [user, setUser] = useState(null);\n//   const [homestay, setHomestay] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     facilities: \"\",\n//     availabilitydate: [],\n//     location: \"\",\n//     googlemapurl: \"\",\n//     images: [],\n//     pricepernight: \"\",\n//   });\n//   const [imageFiles, setImageFiles] = useState([]);\n\n//   useEffect(() => {\n//     async function fetchUser() {\n//       const { data, error } = await supabase.auth.getUser();\n//       if (error) {\n//         console.error(\"Error fetching user:\", error);\n//       } else {\n//         setUser(data.user);\n//         fetchHomestay(data.user.id); // Fetch homestay only when user is available\n//       }\n//     }\n//     fetchUser();\n//   }, []);\n\n//   async function fetchHomestay(userId) {\n//     setLoading(true);\n//     try {\n//       const { data: hostData, error: hostError } = await supabase\n//         .from(\"host\")\n//         .select(\"hostid\")\n//         .eq(\"hostid\", userId) // Use Supabase's user ID instead of Clerk\n//         .single();\n  \n//       if (hostError || !hostData) {\n//         console.error(\"Error fetching host ID:\", hostError);\n//         setLoading(false);\n//         return;\n//       }\n  \n//       const hostId = hostData.hostid;\n  \n//       const { data, error } = await supabase\n//         .from(\"homestay\")\n//         .select(\"*\")\n//         .eq(\"hostid\", hostId)\n//         .single();\n  \n//       if (error) {\n//         console.error(\"Error fetching homestay:\", error);\n//       } else {\n//         setHomestay(data);\n//       }\n//     } catch (err) {\n//       console.error(\"Unexpected error:\", err);\n//     }\n//     setLoading(false);\n//   }\n\n//   function handleChange(e) {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   }\n\n//   function handleDateChange(date) {\n//     if (!date) return;\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: [...prevState.availabilitydate, date]\n//     }));\n//   }\n\n//   function removeDate(index) {\n//     setFormData(prevState => ({\n//       ...prevState,\n//       availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n//     }));\n//   }\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!user) return;\n  \n//     const { data: hostData, error: hostError } = await supabase\n//       .from(\"host\")\n//       .select(\"hostid\")\n//       .eq(\"hostid\", user.id) // Use Supabase user ID instead of Clerk\n//       .single();\n  \n//     if (hostError || !hostData) {\n//       console.error(\"Error fetching host ID:\", hostError);\n//       return;\n//     }\n  \n//     const hostId = hostData.hostid;\n    \n//     let imageUrls = [];\n\n//     for (const file of imageFiles) {\n//       const { data, error } = await supabase.storage\n//         .from(\"homestay-images\")\n//         .upload(`homestays/${user.id}/${file.name}`, file, { cacheControl: \"3600\" });\n\n//       if (error) {\n//         console.error(\"Error uploading image:\", error);\n//       } else {\n//         console.log(\"Uploaded file path:\", data.path);\n\n//         // Get the public URL\n//         const { data: publicURL } = supabase.storage\n//           .from(\"homestay-images\")\n//           .getPublicUrl(data.path);\n\n//         console.log(\"Generated Public URL:\", publicURL.publicUrl);\n//         imageUrls.push(publicURL.publicUrl);\n//       }\n//     }\n    \n//     console.log(\"Final image URLs:\", imageUrls);\n    \n//     const { error } = await supabase.from(\"homestay\").insert([\n//       {\n//         hostid: hostId,\n//         name: formData.name,\n//         description: formData.description,\n//         facilities: formData.facilities,\n//         availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n//         location: formData.location,\n//         googlemapurl: formData.googlemapurl,\n//         images: imageUrls,\n//         pricepernight: formData.pricepernight,\n//       },\n//     ]);\n  \n//     if (error) {\n//       console.error(\"Error adding homestay:\", error);\n//     } else {\n//       console.log(\"Homestay added successfully!\");\n//       fetchHomestay(user.id);\n//     }\n//   }\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n//   return (\n//     <div className=\"flex h-screen\">\n//       <Sidebar />\n//       <main className=\"flex-1 p-8\">\n//         <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n//         <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n//           <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" className=\"w-full border p-2 rounded\" value={formData.name} onChange={handleChange} required />\n//           <textarea name=\"description\" placeholder=\"Description\" className=\"w-full border p-2 rounded\" value={formData.description} onChange={handleChange} required />\n//           <input type=\"text\" name=\"facilities\" placeholder=\"Facilities (comma-separated)\" className=\"w-full border p-2 rounded\" value={formData.facilities} onChange={handleChange} required />\n\n//           <div>\n//             <label className=\"block text-gray-700 font-semibold\">Availability Dates:</label>\n//             <DatePicker\n//               selected={null}\n//               onChange={(date) => handleDateChange(date)}\n//               dateFormat=\"yyyy-MM-dd\"\n//               className=\"w-full border p-2 rounded\"\n//               placeholderText=\"Select available dates\"\n//             />\n\n//             <div className=\"mt-2 flex flex-wrap gap-2\">\n//               {formData.availabilitydate.map((date, index) => (\n//                 <div key={index} className=\"flex items-center bg-gray-200 px-2 py-1 rounded\">\n//                   <span>{date.toISOString().split(\"T\")[0]}</span>\n//                   <button\n//                     type=\"button\"\n//                     className=\"ml-2 text-red-500\"\n//                     onClick={() => removeDate(index)}\n//                   >\n//                     ‚ùå\n//                   </button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           <select name=\"location\" value={formData.location} onChange={handleChange} className=\"w-full border p-2 rounded\" required>\n//             <option value=\"\" disabled>Select Dzongkhag</option>\n//             {dzongkhags.map((dzongkhag, index) => (\n//               <option key={index} value={dzongkhag}>{dzongkhag}</option>\n//             ))}\n//           </select>\n//           <input type=\"text\" name=\"googlemapurl\" placeholder=\"Google Map URL\" className=\"w-full border p-2 rounded\" value={formData.googlemapurl} onChange={handleChange} required />\n\n\n//           <input type=\"file\" multiple accept=\"image/*\" onChange={(e) => setImageFiles([...e.target.files])} className=\"w-full border p-2 rounded\" />\n//           <input type=\"number\" name=\"pricepernight\" placeholder=\"Price per Night (Nu.)\" className=\"w-full border p-2 rounded\" value={formData.pricepernight} onChange={handleChange} required />\n\n          \n//           <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">Add Homestay</button>\n//         </form>\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default Homestay;\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { supabase } from \"../../utils/supabaseClient\";\nimport Sidebar from \"../../components/Sidebar\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst dzongkhags = [\n  \"Bumthang\", \"Chhukha\", \"Dagana\", \"Gasa\", \"Haa\", \"Lhuentse\", \"Mongar\", \n  \"Paro\", \"Pema Gatshel\", \"Punakha\", \"Samdrup Jongkhar\", \"Samtse\", \"Sarpang\",\n  \"Thimphu\", \"Trashi Yangtse\", \"Trashigang\", \"Trongsa\", \"Tsirang\", \"Wangdue Phodrang\", \"Zhemgang\"\n];\n\nfunction Homestay() {\n  const [user, setUser] = useState(null);\n  const [homestay, setHomestay] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [homestayId, setHomestayId] = useState(null);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    facilities: \"\",\n    availabilitydate: [],\n    location: \"\",\n    googlemapurl: \"\",\n    images: [],\n    pricepernight: \"\",\n  });\n\n  const [imageFiles, setImageFiles] = useState([]);\n\n  useEffect(() => {\n    async function fetchUser() {\n      const { data, error } = await supabase.auth.getUser();\n      if (error) {\n        console.error(\"Error fetching user:\", error);\n      } else {\n        setUser(data.user);\n        fetchHomestay(data.user.id); // Fetch homestay only when user is available\n      }\n    }\n    fetchUser();\n  }, []);\n\n  async function fetchHomestay(userId) {\n    setLoading(true);\n    try {\n      const { data: hostData, error: hostError } = await supabase\n        .from(\"host\")\n        .select(\"hostid\")\n        .eq(\"userid\", userId) // Make sure this matches your table structure\n        .single();\n\n      if (hostError || !hostData) {\n        console.error(\"Error fetching host ID:\", hostError);\n        setLoading(false);\n        return;\n      }\n\n      const hostId = hostData.hostid;\n\n      const { data, error } = await supabase\n        .from(\"homestay\")\n        .select(\"*\")\n        .eq(\"hostid\", hostId)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching homestay:\", error);\n      } else {\n        setHomestay(data);\n        setHomestayId(data.homestayid);\n        setFormData({\n          name: data.name,\n          description: data.description,\n          facilities: data.facilities,\n          availabilitydate: data.availabilitydate,\n          location: data.location,\n          googlemapurl: data.googlemapurl,\n          images: data.images,\n          pricepernight: data.pricepernight,\n        });\n      }\n    } catch (err) {\n      console.error(\"Unexpected error:\", err);\n    }\n    setLoading(false);\n  }\n\n  function handleChange(e) {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  }\n\n  function handleDateChange(date) {\n    if (!date) return;\n    setFormData(prevState => ({\n      ...prevState,\n      availabilitydate: [...prevState.availabilitydate, date]\n    }));\n  }\n\n  function removeDate(index) {\n    setFormData(prevState => ({\n      ...prevState,\n      availabilitydate: prevState.availabilitydate.filter((_, i) => i !== index)\n    }));\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (!user) return;\n\n    const { data: hostData, error: hostError } = await supabase\n      .from(\"host\")\n      .select(\"hostid\")\n      .eq(\"userid\", user.id)\n      .single();\n\n    if (hostError || !hostData) {\n      console.error(\"Error fetching host ID:\", hostError);\n      return;\n    }\n\n    const hostId = hostData.hostid;\n    \n    let imageUrls = [];\n\n    for (const file of imageFiles) {\n      const { data, error } = await supabase.storage\n        .from(\"homestay-images\")\n        .upload(`homestays/${user.id}/${file.name}`, file, { cacheControl: \"3600\" });\n\n      if (error) {\n        console.error(\"Error uploading image:\", error);\n      } else {\n        imageUrls.push(data.path);\n      }\n    }\n\n    console.log(\"Final image URLs:\", imageUrls);\n\n    if (editing) {\n      // Update homestay\n      const { error } = await supabase.from(\"homestay\").update({\n        name: formData.name,\n        description: formData.description,\n        facilities: formData.facilities,\n        availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n        location: formData.location,\n        googlemapurl: formData.googlemapurl,\n        images: [...formData.images, ...imageUrls],\n        pricepernight: formData.pricepernight,\n      }).eq(\"homestayid\", homestayId);\n\n      if (error) {\n        console.error(\"Error updating homestay:\", error);\n      } else {\n        console.log(\"Homestay updated successfully!\");\n        setEditing(false);\n        fetchHomestay(user.id);\n      }\n    } else {\n      // Insert new homestay\n      const { error } = await supabase.from(\"homestay\").insert([\n        {\n          hostid: hostId,\n          name: formData.name,\n          description: formData.description,\n          facilities: formData.facilities,\n          availabilitydate: formData.availabilitydate.map(date => date.toISOString().split(\"T\")[0]),\n          location: formData.location,\n          googlemapurl: formData.googlemapurl,\n          images: imageUrls,\n          pricepernight: formData.pricepernight,\n        },\n      ]);\n\n      if (error) {\n        console.error(\"Error adding homestay:\", error);\n      } else {\n        console.log(\"Homestay added successfully!\");\n        fetchHomestay(user.id);\n      }\n    }\n  }\n\n  if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 p-8\">\n        <h2 className=\"text-2xl font-semibold\">Homestay Management</h2>\n        <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n          <input type=\"text\" name=\"name\" placeholder=\"Homestay Name\" value={formData.name} onChange={handleChange} required />\n          <textarea name=\"description\" placeholder=\"Description\" value={formData.description} onChange={handleChange} required />\n          <input type=\"text\" name=\"facilities\" placeholder=\"Facilities\" value={formData.facilities} onChange={handleChange} required />\n\n          <select name=\"location\" value={formData.location} onChange={handleChange} required>\n            <option value=\"\" disabled>Select Dzongkhag</option>\n            {dzongkhags.map((dzongkhag, index) => (\n              <option key={index} value={dzongkhag}>{dzongkhag}</option>\n            ))}\n          </select>\n\n          <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">\n            {editing ? \"Update Homestay\" : \"Add Homestay\"}\n          </button>\n        </form>\n\n        {homestay && (\n          <div className=\"mt-6\">\n            <h3 className=\"text-xl font-semibold\">{homestay.name}</h3>\n            <p>{homestay.description}</p>\n            <button onClick={() => setEditing(true)} className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">\n              Edit Homestay\n            </button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default Homestay;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,UAAU,GAAG,CACjB,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}